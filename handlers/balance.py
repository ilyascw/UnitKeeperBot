from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from db.database import async_session
from db.models import User, Balance

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —é–Ω–∏—Ç–æ–≤
class TransferUnitsState(StatesGroup):
    waiting_for_recipient = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    waiting_for_amount = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã

@router.message(Command("balance"))
async def balance(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance.
    –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —é–Ω–∏—Ç—ã.
    """
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="view_balance")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —é–Ω–∏—Ç—ã", callback_data="transfer_units")]
    ])

    await message.answer("–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)

@router.callback_query(F.data == "view_balance")
async def view_balance(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å".
    –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –≥—Ä—É–ø–ø—É
        stmt = select(User).where(User.id == user_id)
        result = await session.execute(stmt)
        user = result.scalars().first()

        if not user or not user.group_id:
            await callback_query.answer("‚ùå –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥—Ä—É–ø–ø–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(Balance).where((Balance.user_id == user_id) & (Balance.group_id == user.group_id))
        result = await session.execute(stmt)
        balance = result.scalars().first()

        if not balance:
            await callback_query.answer("‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
        await callback_query.message.edit_text(f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {balance.balance} —é–Ω–∏—Ç–æ–≤.")


@router.callback_query(F.data == "transfer_units")
async def transfer_units_start(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —é–Ω–∏—Ç—ã".
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
    """
    user_id = callback_query.from_user.id

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –≥—Ä—É–ø–ø—É
        stmt = select(User).where(User.id == user_id)
        result = await session.execute(stmt)
        user = result.scalars().first()

        if not user or not user.group_id:
            await callback_query.answer("‚ùå –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥—Ä—É–ø–ø–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
        stmt = select(User).where(User.group_id == user.group_id)
        result = await session.execute(stmt)
        members = result.scalars().all()

        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üë§ {member.id}", callback_data=f"transfer_to_{member.id}")]
            for member in members if member.id != user_id  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ] + [
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_balance")]
        ])

        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=keyboard)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        await state.set_state(TransferUnitsState.waiting_for_recipient)

@router.callback_query(F.data.startswith("transfer_to_"))
async def choose_recipient(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤.
    """
    recipient_id = int(callback_query.data.split("_")[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(recipient_id=recipient_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–Ω–∏—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —é–Ω–∏—Ç–æ–≤
    await state.set_state(TransferUnitsState.waiting_for_amount)

@router.message(TransferUnitsState.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —é–Ω–∏—Ç–æ–≤.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥, –µ—Å–ª–∏ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.
    """
    user_id = message.from_user.id
    amount = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    try:
        amount = float(amount)
        if amount <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        recipient_id = data['recipient_id']

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        stmt = select(Balance).where((Balance.user_id == user_id) & (Balance.group_id == User.group_id))
        result = await session.execute(stmt)
        sender_balance = result.scalars().first()

        if not sender_balance or sender_balance.balance < amount:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —é–Ω–∏—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        stmt = select(Balance).where((Balance.user_id == recipient_id) & (Balance.group_id == User.group_id))
        result = await session.execute(stmt)
        recipient_balance = result.scalars().first()

        if not recipient_balance:
            await message.edit_text("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        sender_balance.balance -= amount
        recipient_balance.balance += amount

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await session.commit()

        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} —é–Ω–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}.")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@router.callback_query(F.data == "back_to_balance")
async def back_to_balance(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    """
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="view_balance")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —é–Ω–∏—Ç—ã", callback_data="transfer_units")]
    ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        text="–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard
    )