# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã aiogram
from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    ReplyKeyboardRemove
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from sqlalchemy import select
from db.database import async_session
from db.models import Group, User, Balance

import re

router = Router()


class JoinGroupState(StatesGroup):
    waiting_for_group_id = State()
    waiting_for_password = State()

@router.message(Command("join_group"))
@router.message(F.text == "üîë –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É")
async def join_group_start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with async_session() as session:
        user = await session.get(User, user_id)
        if user and user.group_id:
            await message.answer("‚ùå –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –≤—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã.\n–î–ª—è –≤—ã—Ö–æ–¥–∞: /exit_group")
            return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(JoinGroupState.waiting_for_group_id)


@router.message(JoinGroupState.waiting_for_group_id)
async def join_group_id(message: Message, state: FSMContext):
    name = message.text

    if not re.match(r'^[A-Za-z0-9_–∞-—è–ê-–Ø—ë–Å]+$', name):
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.")
        return
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ –∏–º–µ–Ω–∏
        group = await session.execute(select(Group).where(Group.name == name))
        group = group.scalars().first()

        if not group:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–Ω–æ–≤–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º group_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(group_id=group.id)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≥—Ä—É–ø–ø—ã:")
        await state.set_state(JoinGroupState.waiting_for_password)


@router.message(JoinGroupState.waiting_for_password)
async def join_group_password(message: Message, state: FSMContext):
    data = await state.get_data()
    group_id = data["group_id"]
    user_id = message.from_user.id

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        group = await session.get(Group, group_id)
        if not group or group.password != message.text:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await session.get(User, user_id)
        if not user:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É Users
            user = User(id=user_id, group_id=group_id)
            session.add(user)
            await session.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ Users
        else:
            user.group_id = group_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ Balance
        balance_entry = await session.execute(
            select(Balance).where(Balance.user_id == user_id, Balance.group_id == group_id)
        )
        existing_balance = balance_entry.scalars().first()

        if not existing_balance:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É Balance, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç
            balance_entry = Balance(user_id=user_id, group_id=group_id, balance=0)
            session.add(balance_entry)

        # –ï—Å–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        if not group.weights:
            group.weights = {}

        if not group.owner_id:
            group.owner_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ weights –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
        weights = group.weights.copy()
        weights[f'{user_id}'] = 0
        num_members = len(weights)
        new_balance = (100 / num_members)
        weights = {k: new_balance for k in weights.keys()}
        group.weights = weights
        await session.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö Users, Balance –∏ Group

        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –≥—Ä—É–ø–ø—É {group.name}!", reply_markup=ReplyKeyboardRemove())
        await state.clear()