# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã aiogram
from aiogram import Router, F, Bot
from aiogram.types import (
    Message
)
from aiogram.filters import Command

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from sqlalchemy import select
from db.database import async_session
from db.models import Group, User, Balance

router = Router()

@router.message(Command("group_info"))
async def group_info(message: Message, bot: Bot):
    from sprint_results import get_sprint_end_date
    user_id = message.from_user.id

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        stmt = select(User).where(User.id == user_id)
        result = await session.execute(stmt)
        user = result.scalars().first()

        if not user or not user.group_id:
            await message.answer("‚ùå –¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥—Ä—É–ø–ø–µ.")
            return

        group_id = user.group_id

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
        stmt = select(Group).where(Group.id == group_id)
        result = await session.execute(stmt)
        group = result.scalars().first()

        if not group:
            await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
        stmt = (
            select(User.id, Group.name, Balance.balance)
            .join(Group, Group.id == User.group_id)
            .join(Balance, (Balance.user_id == User.id) & (Balance.group_id == User.group_id))
            .where(User.group_id == group_id)
        )
        result = await session.execute(stmt)
        members = result.all()

        members_info = []
        for m in members:
            try:
                chat_member = await bot.get_chat(m[0])  # –ó–∞–ø—Ä–æ—Å –≤ Telegram API
                tg_name = chat_member.first_name  # –ë–µ—Ä–µ–º –∏–º—è –∏–∑ Telegram

                members_info.append(
                    f"üë§ {tg_name} | ID: {m[0]} | –ù–∞–≥—Ä—É–∑–∫–∞: {group.weights.get(str(m[0]), 0):.0f}% {'(üëë –í–ª–∞–¥–µ–ª–µ—Ü)' if m[0] == group.owner_id else ''}| –±–∞–ª–∞–Ω—Å {m[2]}"
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {m[0]}: {e}")

        members_text = "\n".join(members_info) if members_info else "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = (
            f"üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {group.name}\n"
            f"–î–µ–Ω—å –Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∏–Ω—Ç–∞: {group.start_day}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ø—Ä–∏–Ω—Ç–∞: {group.sprint_duration} –¥–Ω–µ–π\n"
            f"–î–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—â–µ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞: {get_sprint_end_date(group.start_day, group.sprint_duration)} 00:00\n\n"
            f"–ë–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã: {group.group_balance}\n\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n{members_text}\n"
        )

        await message.answer(response)