import asyncio
from datetime import datetime, timedelta
from aiogram import Bot
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from db.models import Task, Log, Group, User, Balance
from db.database import async_session
import calendar

def get_sprint_end_date(start_day: str, duration: int):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ø—Ä–∏–Ω—Ç–∞, –∏—Å—Ö–æ–¥—è –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –¥–Ω—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    weekdays_dict = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "Monday",
        "–≤—Ç–æ—Ä–Ω–∏–∫": "Tuesday",
        "—Å—Ä–µ–¥–∞": "Wednesday",
        "—á–µ—Ç–≤–µ—Ä–≥": "Thursday",
        "–ø—è—Ç–Ω–∏—Ü–∞": "Friday",
        "—Å—É–±–±–æ—Ç–∞": "Saturday",
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "Sunday"
    }
    today = datetime.now()
    weekday_index = list(calendar.day_name).index(weekdays_dict[start_day])  # –ò–Ω–¥–µ–∫—Å –¥–Ω—è –Ω–∞—á–∞–ª–∞ (0=Monday, 6=Sunday)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (–∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–µ–Ω—å) –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è
    days_back = (today.weekday() - weekday_index) % 7
    start_date = today - timedelta(days=days_back)

    # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ø—Ä–∏–Ω—Ç–∞
    end_date = start_date + timedelta(days=duration-1) ####–ø–æ–º–µ–Ω—è—Ç—å
    return end_date.date()

async def calculate_results(bot: Bot):
    try:
        now = datetime.now()

        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
            groups = await session.execute(select(Group))
            groups = groups.scalars().all()

            for group in groups:
                start_day, duration, owner_id, weights = group.start_day, group.s_duration, group.owner_id, group.weights

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ø—Ä–∏–Ω—Ç–∞
                end_date = get_sprint_end_date(start_day, duration)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ø—Ä–∏–Ω—Ç–∞
                if now.date() != end_date:
                    continue  

                user_results = {}
                total_plan = 0
                total_fact = 0

                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≥—Ä—É–ø–ø—ã
                tasks = await session.execute(select(Task).where(Task.group_id == group.id))
                tasks = tasks.scalars().all()

                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –≥—Ä—É–ø–ø—ã
                logs = await session.execute(select(Log).where(Log.group_id == group.id))
                logs = logs.scalars().all()

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã
                users = await session.execute(select(User).where(User.group_id == group.id))
                users = users.scalars().all()

                for user in users:
                    user_id = user.id
                    try:
                        user_chat = await bot.get_chat(user_id)
                        first_name = user_chat.first_name
                    except Exception as e:
                        first_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"

                    # –ü–ª–∞–Ω–æ–≤—ã–µ —é–Ω–∏—Ç—ã
                    plan_units = sum(float(task.cost) * int(task.frequency) for task in tasks) * (weights.get(str(user_id), 0))/100
                    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —é–Ω–∏—Ç—ã
                    fact_units = sum(float(task.cost) for log in logs if log.user_id == user_id and log.status == "completed" 
                                     for task in tasks if task.id == log.task_id)

                    total_plan += plan_units
                    total_fact += fact_units

                    efficiency = (fact_units / plan_units) * 100 if plan_units else 0
                    user_results[user_id] = (first_name, plan_units, fact_units, efficiency)

                # 1. –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞
                bonus = 0.25 * total_plan if total_fact >= total_plan else 0
                                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã

                group_balance = await session.execute(
                    select(Group)
                    .where(Group.id == group.id)
                )

                group_balance = group_balance.scalar_one_or_none()

                if group_balance:
                    group_balance.balance = total_fact - total_plan

                await session.commit()

                # 2. –ü–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for user_id in user_results.keys():
                    first_name, plan, fact, _ = user_results[user_id]
                    balance_change = (float(fact) - float(plan)) + bonus * weights.get(user_id, 0)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    balance = await session.execute(
                        select(Balance)
                        .where(Balance.user_id == user_id, Balance.group_id == group.id)
                    )
                    balance = balance.scalar_one_or_none()

                    if balance:
                        balance.balance = round((float(balance.balance) + float(balance_change)), 2)
                    else:
                        balance = Balance(user_id=user_id, group_id=group.id, balance=balance_change)
                        session.add(balance)

                    await session.commit()

                # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for user_id, (first_name, plan, fact, efficiency) in user_results.items():
                    text = (
                        f"üìä –ò—Ç–æ–≥–∏ —Å–ø—Ä–∏–Ω—Ç–∞:\n\n"
                        f"üë§ {first_name}\n"
                        f"üîπ –ü–ª–∞–Ω: {plan} —é–Ω–∏—Ç–æ–≤\n"
                        f"‚úÖ –§–∞–∫—Ç: {fact} —é–Ω–∏—Ç–æ–≤\n"
                        f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%\n"
                        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance.balance:.2f} —é–Ω–∏—Ç–æ–≤"
                    )
                    try:
                        await bot.send_message(user_id, text)

                    except Exception as e:
                        pass


                # 4. –û—Ç—á–µ—Ç –≤ –æ–±—â–∏–π —á–∞—Ç
                summary_text = "üì¢ –ò—Ç–æ–≥–∏ –≥—Ä—É–ø–ø—ã:\n\n" + f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø—ã {bonus} —é.\n" + "\n".join([
                    f"üë§ {first_name}: {fact}/{plan} —é–Ω–∏—Ç–æ–≤ ({eff:.1f}%)"
                    for user_id, (first_name, plan, fact, eff) in user_results.items()
                ])
                try:
                    await bot.send_message(owner_id, summary_text)
 
                except Exception as e:
                    pass

                # 5. –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –≥—Ä—É–ø–ø—ã (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –ª–æ–≥–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)


    except Exception as e:
        pass

async def scheduler(bot: Bot):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Ç–æ–≥–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (23:59)"""

    while True:
        try:
            now = datetime.now()
            target_time = now.replace(hour=00, minute=00, second=0, microsecond=0)
            sleep_time = (target_time - now).total_seconds()

            if sleep_time < 0:
                sleep_time += 86400  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ, –∂–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è

            await asyncio.sleep(sleep_time)


            await calculate_results(bot)
        except Exception as e:
            pass

async def setup_sprint_scheduler(bot: Bot):
    """–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤"""
    asyncio.create_task(scheduler(bot))